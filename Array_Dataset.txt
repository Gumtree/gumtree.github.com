
Gumtree Workshop Module 1: Gumpy, Arrays and Datasets
=====================================================

Background 
----------

### Gumtree/Python

Gumtree is written in Java.  Java is a complex and tedious language to
write scientific code in.  Python is a very pleasant language to write
scientific code in, particularly with scientific extensions like Numpy
(see below). However, Python is a scripting language that was
originally written in C, which would preclude its use in
Gumtree. Fortunately, a version of Python written in Java exists,
called Jython. Gumtree can therefore run Python and the Python in
Gumtree has full access to everything that Gumtree can do.  'Python' is used
in the following unless the behaviour is specific to Jython.

### Arrays

Many scientific datasets can be represented as homogeneous *arrays* of elements.
An "array" is a table of elements with an arbitrary number of dimensions -
on our instruments we would usually produce 2,3 or 4-dimensional data.

Many (all?) high-level scientific computing packages provide such array objects together
with many operations that can be performed on these arrays.  The array support in Gumtree/Python
is modelled as closely as possible on 'Numpy'.  [The Numpy tutorial][numpy tutorial]
is a useful learning resource for Gumpy arrays, and [the Numpy reference][numpy reference]
is a useful reference for many Gumpy array operations.

[numpy tutorial]: http://wiki.scipy.org/Tentative_NumPy_Tutorial
[numpy reference]: http://docs.scipy.org/doc/numpy/reference

### What is Gumpy?

Gumpy (Gumtree/Python) adds Numpy-like support for array objects.  It builds on these basic array types
to provide richer objects ("Datasets") that allow automatic error propagation, axis manipulation,
and easy interfacing to our data files.

Arrays
------

The array routines are contained in the module 'array'.  As many of the array routines have the same name
as dataset routines (see later), we must prefix them with 'array' to disambiguate.

### Creating arrays

1.  arange â€“ to create an array with a given shape and type.
    
~~~
    >> array.arange(12,[3,4])
    Array([[ 0,  1,  2,  3],
           [ 4,  5,  6,  7],
           [ 8,  9, 10, 11]])
~~~

2. From a list

~~~
    >> array.Array([1,2,3,4])
    Array([1, 2, 3, 4])
~~~

3. As all zeros or ones:

~~~
>> array.ones([3,2])
Array([[1.000000, 1.000000],
       [1.000000, 1.000000],
       [1.000000, 1.000000]])
~~~

4. The same shape as another array (`ones_like`, `zeros_like`):

~~~
>> p = array.arange(6,[3,2])
>> p
Array([[0, 1],
       [2, 3],
       [4, 5]])
>> array.ones_like(p)
Array([[1, 1],
       [1, 1],
       [1, 1]])
~~~

5. Also: `rand`,`instance`. `rand` will fill the array with random values between 0 and 1. `instance` creates an array 
of the specified shape and type (using the 'dtype' keyword).

### Interrogating arrays

An array object has a number of attributes that provide information:
`shape`, `ndim`, `size`, `dtype`, and `tolist` are the most useful.

~~~
>> p = array.rand([3,2])
>> p.dtype
<type 'float'>
>> p.shape
[3, 2]
~~~

### Manipulating arrays

The first element in an array is always numbered zero.  The dimensions are
numbered from the outside in in a nested list representation; it may help to
read a shape such as `[6,3,2]` as "6 lists of 3 lists of 2 elements".  NeXuS
file dimensions are `[frame,TOF,vertical,horizontal]`.

#. Slicing and indexing: `[start:finish:step,<next dimension>,...]`

`finish` and `step` can be omitted, in which case they default to the
end of the array and 1, respectively.

~~~
>> c=array.arange(12,[6,2])
>> c
Array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11]])
>> c[1:6:2]
Array([[ 2,  3],
       [ 6,  7],
       [10, 11]])

>> c[1:6:2,1]
Array([[ 3],
       [ 7],
       [11]])
~~~

#. Setting values: as above, with equals:

~~~
>> c[1:6:2,1] = 101
>> c
Array([[  0,   1],
       [  2, 101],
       [  4,   5],
       [  6, 101],
       [  8,   9],
       [ 10, 101]])
~~~

#. Unary mathematical functions: sin, cos, tan, arcsin, arccos, arctan, sqrt, 
exp,ln, log10...

~~~
>> c.sqrt()
Array([[0.000000, 1.000000],
       [1.414214, 1.732051],
       [2.000000, 2.236068],
       [2.449490, 2.645751],
       [2.828427, 3.000000],
       [3.162278, 3.316625]])
~~~

#. Binary mathematical functions: +, - , * , /

~~~
>> c=array.arange(12,[6,2])
>> d = c + 1
>> d
Array([[1.000000, 2.000000],
       [3.000000, 4.000000],
       [5.000000, 6.000000],
       [7.000000, 8.000000],
       [9.000000, 10.000000],
       [11.000000, 12.000000]])

>> c = array.arange(12,[3,4])
>> d = array.ones_like(c)*2
>> c+d
Array([[ 2,  3,  4,  5],
       [ 6,  7,  8,  9],
       [10, 11, 12, 13]])
~~~

#. Masking: use of comparison, e.g. < , >=, == etc.

~~~
>> p = array.arange(12)
>> p
Array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
>> p > 5
Array([False, False, False, False, False, False, True, True, True, True, True, True])
>> q = array.rand(12)
>> q[p>5] = -0.5
>> q
Array([0.004117, 0.298131, 0.256593, 0.800404, 0.245852, 0.606921, -0.500000, -0.500000, -0.500000, -0.500000, -0.500000, -0.500000])
~~~

#. Reshaping: `transpose`,`reshape`,`get_reduced`

~~~
>> a = array.arange(12,[3,4])
>> a
Array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>> a.reshape([4,3])
Array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
>> a.transpose()
Array([[ 0,  4,  8],
       [ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11]])
~~~

### Aggregate functions: sum(), max(), min(), any(), all(), intg()

Note that sum can take an axis specifier, in which case it will
sum along the given axis, always producing a one-dimensional array. To
sum *only* along one dimension, use `intg`.

~~~
>> c = array.arange(5,[5,1])
>> c.sum()
10.0
>> c = array.arange(12,[6,2])
>> c.sum(0)
Array([1.000000, 5.000000, 9.000000, 13.000000, 17.000000, 21.000000])
>> c.sum(1)
Array([30.000000, 36.000000])
>> c.max()
11.0
~~~

Dataset - Multi-Dimensional Data Container
------------------------------------------

### What is a Dataset?

A Dataset enhances Arrays by adding axes for each dimension, variance and metadata.  Look at `arange` for Datasets:

~~~
>> d = arange(12,[3,4])
>> print str(d)
title: 17
storage: [[ 0  1  2  3]
          [ 4  5  6  7]
          [ 8  9 10 11]]
error: [[0.000000, 1.000000, 1.414214, 1.732051]
        [2.000000, 2.236068, 2.449490, 2.645751]
        [2.828427, 3.000000, 3.162278, 3.316625]]
axes:
  0. title: dim_0
     storage: [0.000000, 1.000000, 2.000000]
  1. title: dim_1
     storage: [0.000000, 1.000000, 2.000000, 3.000000]
~~~

### Dataset manipulation

All of the above array manipulation routines are applicable to Datasets, and will propagate errors as well.

### Creating datasets

Datasets can be created from Arrays, lists and NeXuS files:

~~~
>> p = Dataset('/home/jrh/programs/echidna/Echidna-Gumtree-Scripts/Data/ECH0010123.nx.hdf')
>> p.shape
[50, 1, 128, 128]
>> p['/entry1/sample/name']
'Ni404-cubane'
>> p['/entry1/experiment/title']
'P2708'
~~~

Additional attributes (i.e. found using `.`) include: `axes` (a list of axes), `storage` 
(the array holding the data) and `var` (the variance array).  Datasets originating from
files have the `location` attribute as well.

~~~
>> p.location
u'/home/jrh/programs/echidna/Echidna-Gumtree-Scripts/Data/ECH0010123.nx.hdf'
>> d.axes[0]
SimpleData(Array([0.000000, 1.000000, 2.000000]), 
           title='dim_0',
           units='')
>> len(d.axes)
2
>> d.storage
Array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>> d.var
SimpleData(Array([[0.000000, 1.000000, 2.000000, 3.000000],
                  [4.000000, 5.000000, 6.000000, 7.000000],
                  [8.000000, 9.000000, 10.000000, 11.000000]]), 
           title='variance',
           units='')
~~~

### Plotting datasets

Your Gumtree interface has 3 pre-defined plotting areas known as `Plot1`, `Plot2` and `Plot3`.  To plot a dataset,
simply call the `set_dataset` method of these objects:

~~~
>> Plot1.set_dataset(p[0][0])
org.gumtree.vis.nexus.dataset.Hist2DNXDataset@a65f55

>> Plot2.set_dataset(Dataset(p.axes[0]))
org.gumtree.vis.dataset.XYErrorDataset@18697cd
~~~

Other useful methods and attributes: 

`ds` 
:     a list of datasets in the plot, or `None`
`add_dataset(ds)`
:     add a further dataset
`remove_dataset(ds)`
:     remove the specified dataset
`set_title(string)` 
:     add a title to the plot
`set_x_label(string)`
:     add a horizontal axis label to the plot (a plot must be present)
`set_y_label(string)`
:     add a vertical axis label (a plot must be present)

